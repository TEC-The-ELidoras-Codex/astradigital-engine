#!/usr/bin/env python3
"""
Test WordPress posting with OpenAI-generated content for the Airth News Automation system.
This script tests the complete flow from content generation to WordPress posting.
"""
import os
import sys
import logging
from pathlib import Path
import json
import random

# Add the parent directory to the Python path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger("TestWPPosting")

# Import required modules
try:
    from scripts.airth_news_automation import AirthNewsAutomation
    from dotenv import load_dotenv
except ImportError as e:
    logger.critical(f"Failed to import required modules: {e}")
    print(f"Error: Failed to import required modules. Make sure all dependencies are installed.")
    print(f"Details: {e}")
    sys.exit(1)

def test_wp_posting():
    """Test WordPress posting with content generated by OpenAI."""
    logger.info("Creating AirthNewsAutomation instance...")
    
    # Load environment variables
    env_path = os.path.join(
        os.path.dirname(
            os.path.dirname(
                os.path.abspath(__file__))),
        'config',
        '.env')
    load_dotenv(env_path)
    
    # Create the automation instance
    automation = AirthNewsAutomation()
    
    # Create a test topic for content generation
    test_topic = {
        "id": 999,
        "suggested_title": "Testing WordPress Publishing with OpenAI Content",
        "keywords": ["test", "openai", "wordpress", "automation", "integration"],
        "dominant_terms": ["test", "wordpress", "openai", "api", "integration"],
        "article_count": 3,
        "relevance_score": 0.95,
        "sentiment": {
            "overall": "positive"
        },
        "summary": "This is a test article to verify that OpenAI-generated content can be properly posted to WordPress.",
        "articles": [
            {
                "title": "Testing WordPress Integration with OpenAI-Generated Content",
                "source": "Test Source",
                "summary": "This article tests the integration between OpenAI content generation and WordPress publishing in the Airth News Automation system."
            }
        ]
    }
    
    # Generate content using the content generator
    logger.info("Generating test content with OpenAI...")
    article_data = automation.content_generator.generate_article_from_topic(test_topic)
    
    if not article_data.get("success"):
        logger.error(f"Failed to generate content: {article_data.get('error')}")
        return False
    
    # Log the generated article details
    logger.info(f"Generated article: '{article_data['title']}'")
    
    # Only proceed with posting if specifically requested
    if len(sys.argv) > 1 and sys.argv[1] == '--post':
        logger.info("Publishing article to WordPress...")
        
        # Post to WordPress
        result = automation.airth.post_to_wordpress(
            title=article_data.get("title", "Test Article"),
            content=article_data.get("content", "Test content."),
            category=article_data.get("category", "technology_ai"),
            tags=article_data.get("keywords", []),
            status="draft"  # Always use draft for testing
        )
        
        if result.get("success"):
            logger.info(f"Successfully posted to WordPress! Post ID: {result.get('post_id')}")
            logger.info(f"URL: {result.get('url')}")
            return True
        else:
            logger.error(f"Failed to post to WordPress: {result.get('error')}")
            return False
    else:
        logger.info("Content generated successfully, but not posting to WordPress. Use --post argument to publish.")
        logger.info(f"Title: {article_data['title']}")
        logger.info(f"Category: {article_data['category']}")
        logger.info(f"Keywords: {', '.join(article_data.get('keywords', []))}")
        logger.info("Content preview:")
        content_preview = article_data['content'][:300] + "..." if len(article_data['content']) > 300 else article_data['content']
        logger.info(content_preview)
        return True

if __name__ == "__main__":
    logger.info("Starting WordPress posting test with OpenAI content...")
    
    if test_wp_posting():
        if len(sys.argv) > 1 and sys.argv[1] == '--post':
            logger.info("Test successful! Article was posted to WordPress.")
        else:
            logger.info("Content generation successful! Use --post to publish to WordPress.")
        sys.exit(0)
    else:
        logger.error("Test failed.")
        sys.exit(1)
